#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ Telegram UserBot –¥–ª—è Termux
–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
"""
import os
import sys
import asyncio
import logging
from datetime import datetime
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
GREEN = '\033[92m'
YELLOW = '\033[93m'
RED = '\033[91m'
BLUE = '\033[94m'
RESET = '\033[0m'
BOLD = '\033[1m'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("userbot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def print_banner():
    """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—É—Å–∫–µ"""
    print(f"{BLUE}‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê{RESET}")
    print(f"{BLUE}‚îÇ  Telegram UserBot - –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫    ‚îÇ{RESET}")
    print(f"{BLUE}‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò{RESET}")
    print()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    print_banner()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –¥–∞–Ω–Ω—ã—Ö
    API_ID = os.getenv("API_ID")
    API_HASH = os.getenv("API_HASH")
    
    if not API_ID or not API_HASH:
        print(f"{RED}–û—à–∏–±–∫–∞: API_ID –∏–ª–∏ API_HASH –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ{RESET}")
        print(f"{YELLOW}–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –≤–∞—à–∏–º–∏ API –¥–∞–Ω–Ω—ã–º–∏:{RESET}")
        print("API_ID=your_api_id")
        print("API_HASH=your_api_hash")
        return
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º telethon –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–Ω—è—Ç–Ω—É—é –æ—à–∏–±–∫—É –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏
    try:
        from telethon import TelegramClient, events
    except ImportError:
        print(f"{RED}–û—à–∏–±–∫–∞: –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ telethon –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞{RESET}")
        print(f"{YELLOW}–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:{RESET}")
        print("pip install telethon python-dotenv cryptg")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    client = TelegramClient(
        'userbot',
        API_ID,
        API_HASH,
        device_model="Termux UserBot",
        system_version="1.0",
        app_version="1.0"
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    
    @client.on(events.NewMessage(pattern=r'/help'))
    async def help_command(event):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        commands = {
            "/help": "–ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            "/ping": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –±–æ—Ç–∞"
        }
        
        message = "üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã**:\n\n"
        for cmd, desc in commands.items():
            message += f"**{cmd}** - {desc}\n"
        
        await event.reply(message)
    
    @client.on(events.NewMessage(pattern=r'/ping'))
    async def ping_command(event):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        start = datetime.now()
        message = await event.reply("üèì Pong!")
        end = datetime.now()
        ms = (end - start).microseconds / 1000
        await message.edit(f"üèì **Pong!**\n‚è± –ó–∞–¥–µ—Ä–∂–∫–∞: {ms:.2f} –º—Å")
    
    # –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞
    try:
        print(f"{YELLOW}–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...{RESET}")
        await client.start()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        me = await client.get_me()
        print(f"{GREEN}UserBot –∑–∞–ø—É—â–µ–Ω!{RESET}")
        print(f"{BLUE}–ê–∫–∫–∞—É–Ω—Ç: {me.first_name} (@{me.username}){RESET}")
        logger.info(f"UserBot –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {me.first_name} (@{me.username})")
        
        # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
        print(f"{YELLOW}–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...{RESET}")
        await client.run_until_disconnected()
        
    except Exception as e:
        print(f"{RED}–û—à–∏–±–∫–∞: {str(e)}{RESET}")
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print(f"\n{YELLOW}–†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º{RESET}")
    except Exception as e:
        print(f"{RED}–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}{RESET}")
        logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")