"""–ú–æ–¥—É–ª—å —Å –æ–±—â–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –¥–ª—è Telegram UserBot"""
import asyncio
import logging
from telethon import TelegramClient, events
from telethon.tl.types import ChannelParticipantsAdmins
import config
from utils.helpers import is_admin, cleanup_message

logger = logging.getLogger(__name__)

def register_handlers(client: TelegramClient):
    """Register utility command handlers"""
    
    @client.on(events.NewMessage(pattern=f"\\{config.CMD_PREFIX}all"))
    async def mention_all(event):
        """Command to mention all users in chat"""
        try:
            if not event.is_group:
                await event.reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö")
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if not await is_admin(client, event.chat_id, event.sender_id):
                await event.reply("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
                await cleanup_message(client, event.message, 5)
                return
                
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã
            message_text = event.message.text.split(f"{config.CMD_PREFIX}all", 1)
            if len(message_text) > 1:
                text = message_text[1].strip()
            else:
                text = "–í–Ω–∏–º–∞–Ω–∏–µ –≤—Å–µ–º!"
                
            chat = await event.get_input_chat()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
            progress_msg = await event.reply("‚è≥ –°–æ–±–∏—Ä–∞—é —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            all_participants = []
            async for participant in client.iter_participants(chat):
                if not participant.bot and not participant.deleted:
                    all_participants.append(participant)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            await progress_msg.edit("‚è≥ –§–æ—Ä–º–∏—Ä—É—é —É–ø–æ–º–∏–Ω–∞–Ω–∏—è...")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –Ω–∞ —á–∞—Å—Ç–∏
            mentions = []
            chunk_size = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            for i in range(0, len(all_participants), chunk_size):
                chunk = all_participants[i:i+chunk_size]
                mention_text = f"{text}\n\n"
                for user in chunk:
                    if user.username:
                        mention_text += f"@{user.username} "
                    else:
                        mention_text += f"[{user.first_name}](tg://user?id={user.id}) "
                mentions.append(mention_text)
            
            # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
            await event.delete()
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            await progress_msg.delete()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
            for mention in mentions:
                await client.send_message(event.chat_id, mention, parse_mode='md')
                # –î–µ–ª–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                await asyncio.sleep(1)
                
            logger.info(f"–ö–æ–º–∞–Ω–¥–∞ all –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ —á–∞—Ç–µ {event.chat_id}, —É–ø–æ–º—è–Ω—É—Ç–æ {len(all_participants)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã all: {e}")
            await event.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")