#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å Telegram UserBot
–ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–æ–ª—å–∫–æ –≤ —Å—Ä–µ–¥–µ Termux –Ω–∞ Android
"""
import os
import sys
import logging
import asyncio
import platform
from datetime import datetime

from telethon import TelegramClient, events
from telethon.tl.types import User
from dotenv import load_dotenv

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤ Termux
def check_termux_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Å—Ä–µ–¥–µ Termux"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã—Ö –¥–ª—è Termux —Ñ–∞–π–ª–æ–≤ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    termux_signs = [
        os.path.exists('/data/data/com.termux'),
        os.getenv('TERMUX_VERSION') is not None,
        'Android' in platform.version()
    ]
    # –ï—Å–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    if os.getenv('USERBOT_TEST_MODE'):
        return True
    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ Termux –Ω–µ –Ω–∞–π–¥–µ–Ω
    if not any(termux_signs):
        print("\033[91m–û—à–∏–±–∫–∞: –≠—Ç–æ—Ç UserBot –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ Termux!\033[0m")
        print("\033[93m–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Termux –∏–∑ F-Droid –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –≤ –Ω–µ–º:\033[0m")
        print("\033[93mhttps://f-droid.org/packages/com.termux/\033[0m")
        print("\033[93m–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ: —Å–º. README.md\033[0m")
        return False
    return True

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ API –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_ID = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –¥–∞–Ω–Ω—ã—Ö
if not API_ID or not API_HASH:
    logger.error("API_ID –∏–ª–∏ API_HASH –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    sys.exit(1)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å –Ω–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
client = TelegramClient(
    'userbot',  # –ò–º—è —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏
    API_ID,
    API_HASH,
    device_model="Termux UserBot",
    system_version="1.0",
    app_version="1.0"
)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
warnings = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ –∞–¥–º–∏–Ω–æ–≤
admin_cache = {}

async def is_admin(chat_id: int, user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if chat_id not in admin_cache:
        admin_cache[chat_id] = {}
        async for admin in client.iter_participants(chat_id, filter=lambda x: x.admin_rights):
            admin_cache[chat_id][admin.id] = True
    return user_id in admin_cache[chat_id]

@client.on(events.NewMessage(pattern='/help'))
async def help_handler(event):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    sender = await event.get_sender()
    if not isinstance(sender, User):
        return
    
    help_text = """üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**

üîπ **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/help` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ `/ping` - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞
‚Ä¢ `/log` - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
‚Ä¢ `/users` - –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–∞—Ç–∞

üî∏ **–ö–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏:**
‚Ä¢ `/ban` - –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ `/unban` - –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ `/warn` - –í—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
‚Ä¢ `/unwarn` - –°–Ω—è—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
‚Ä¢ `/mute` - –ó–∞–≥–ª—É—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ `/unmute` - –°–Ω—è—Ç—å –∑–∞–≥–ª—É—à–µ–Ω–∏–µ
‚Ä¢ `/tmute <–º–∏–Ω—É—Ç—ã>` - –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–∞–≥–ª—É—à–µ–Ω–∏–µ

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ `/chatstats` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞
‚Ä¢ `/userstats` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

üîß **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:**
‚Ä¢ `/mention_all` - –£–ø–æ–º—è–Ω—É—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""

    try:
        await event.reply(help_text)
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ help –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {sender.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã help: {e}")

@client.on(events.NewMessage(pattern='/ping'))
async def ping_handler(event):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    try:
        start = datetime.now()
        message = await event.reply('Pong!')
        end = datetime.now()
        ms = (end - start).microseconds / 1000
        await message.edit(f'Pong! `{ms}ms`')
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ ping –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {ms}ms")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã ping: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
    import log_management
    import moderation
    import admin
    import stats
    from utils.commands import register_handlers as utils_register_handlers
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    log_management.register_handlers(client)
    moderation.register_handlers(client)
    admin.register_handlers(client)
    stats.register_handlers(client)
    utils_register_handlers(client)
    
    try:
        logger.info("–ó–∞–ø—É—Å–∫ UserBot...")
        print("UserBot –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        await client.start()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        me = await client.get_me()
        logger.info(f"UserBot –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {me.first_name} (@{me.username})")
        
        # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
        await client.run_until_disconnected()
        
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await client.disconnect()
        logger.info("UserBot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—Å–∫ –≤ Termux –ø–µ—Ä–µ–¥ –≤—Å–µ–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
    if not check_termux_environment():
        print("\n\033[91m–ó–∞–ø—É—Å–∫ –ø—Ä–µ—Ä–≤–∞–Ω: UserBot —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ Termux!\033[0m")
        sys.exit(1)
        
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n–†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")