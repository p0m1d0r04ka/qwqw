#!/data/data/com.termux/files/usr/bin/bash

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê${NC}"
echo -e "${BLUE}‚îÇ  –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram UserBot –≤ Termux  ‚îÇ${NC}"
echo -e "${BLUE}‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò${NC}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –≤ Termux
if [ ! -d "/data/data/com.termux" ]; then
    echo -e "${RED}–û—à–∏–±–∫–∞: –°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –≤ Termux!${NC}"
    exit 1
fi

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
echo -e "${YELLOW}–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ Termux...${NC}"
pkg update -y

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
echo -e "${YELLOW}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤...${NC}"
pkg install -y python git

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ pip –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
echo -e "${YELLOW}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip...${NC}"
pkg install -y python-pip
pip install --upgrade pip

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö Python-–±–∏–±–ª–∏–æ—Ç–µ–∫
echo -e "${YELLOW}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python-–±–∏–±–ª–∏–æ—Ç–µ–∫...${NC}"
pip install telethon python-dotenv cryptg

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–æ–≤
echo -e "${YELLOW}–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ç–∞–ª–æ–≥–æ–≤...${NC}"
mkdir -p $HOME/userbot
mkdir -p $HOME/userbot/utils

# –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
echo -e "${YELLOW}–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ UserBot...${NC}"
cd $HOME/userbot

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
mkdir -p $HOME/userbot/utils
mkdir -p $HOME/userbot/plugins

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
# –û–ø—Ü–∏—è 1: –ß–µ—Ä–µ–∑ Git
if command -v git &> /dev/null; then
    echo -e "${BLUE}–û–±–Ω–∞—Ä—É–∂–µ–Ω Git, –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...${NC}"
    # –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–º–µ–Ω–∏—Ç—å URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    REPO_URL="https://github.com/username/telegram-userbot.git"
    # –ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    TEMP_DIR=$(mktemp -d)
    git clone "$REPO_URL" "$TEMP_DIR" || {
        echo -e "${RED}–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è!${NC}"
        echo -e "${YELLOW}–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–≥—Ä—É–∑–∫—É –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...${NC}"
    }
    
    # –ï—Å–ª–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –∫–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
    if [ -d "$TEMP_DIR/.git" ]; then
        cp -r "$TEMP_DIR"/* "$HOME/userbot/"
        rm -rf "$TEMP_DIR"
        echo -e "${GREEN}–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω!${NC}"
    fi
else
    echo -e "${YELLOW}Git –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...${NC}"
fi

# –û–ø—Ü–∏—è 2: –ß–µ—Ä–µ–∑ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–µ—Å–ª–∏ Git –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª)
if [ ! -f "$HOME/userbot/userbot.py" ]; then
    echo -e "${YELLOW}–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ UserBot...${NC}"
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    # userbot.py
    cat > $HOME/userbot/userbot.py << 'EOF'
#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å Telegram UserBot
–ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–æ–ª—å–∫–æ –≤ —Å—Ä–µ–¥–µ Termux –Ω–∞ Android
"""
import os
import sys
import logging
import asyncio
import platform
from datetime import datetime

from telethon import TelegramClient, events
from telethon.tl.types import User
from dotenv import load_dotenv

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤ Termux
def check_termux_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Å—Ä–µ–¥–µ Termux"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã—Ö –¥–ª—è Termux —Ñ–∞–π–ª–æ–≤ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    termux_signs = [
        os.path.exists('/data/data/com.termux'),
        os.getenv('TERMUX_VERSION') is not None,
        'Android' in platform.version()
    ]
    # –ï—Å–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    if os.getenv('USERBOT_TEST_MODE'):
        return True
    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ Termux –Ω–µ –Ω–∞–π–¥–µ–Ω
    if not any(termux_signs):
        print("\033[91m–û—à–∏–±–∫–∞: –≠—Ç–æ—Ç UserBot –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ Termux!\033[0m")
        print("\033[93m–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Termux –∏–∑ F-Droid –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –≤ –Ω–µ–º:\033[0m")
        print("\033[93mhttps://f-droid.org/packages/com.termux/\033[0m")
        print("\033[93m–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ: —Å–º. README.md\033[0m")
        return False
    return True

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ API –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_ID = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –¥–∞–Ω–Ω—ã—Ö
if not API_ID or not API_HASH:
    logger.error("API_ID –∏–ª–∏ API_HASH –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    sys.exit(1)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å –Ω–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
client = TelegramClient(
    'userbot',  # –ò–º—è —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏
    API_ID,
    API_HASH,
    device_model="Termux UserBot",
    system_version="1.0",
    app_version="1.0"
)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
warnings = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ –∞–¥–º–∏–Ω–æ–≤
admin_cache = {}

async def is_admin(chat_id: int, user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if chat_id not in admin_cache:
        admin_cache[chat_id] = {}
        async for admin in client.iter_participants(chat_id, filter=lambda x: x.admin_rights):
            admin_cache[chat_id][admin.id] = True
    return user_id in admin_cache[chat_id]

@client.on(events.NewMessage(pattern='/help'))
async def help_handler(event):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    sender = await event.get_sender()
    if not isinstance(sender, User):
        return
    
    help_text = """üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**

üîπ **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/help` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ `/ping` - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞
‚Ä¢ `/log` - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
‚Ä¢ `/users` - –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–∞—Ç–∞

üî∏ **–ö–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏:**
‚Ä¢ `/ban` - –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ `/unban` - –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ `/warn` - –í—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
‚Ä¢ `/unwarn` - –°–Ω—è—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
‚Ä¢ `/mute` - –ó–∞–≥–ª—É—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ `/unmute` - –°–Ω—è—Ç—å –∑–∞–≥–ª—É—à–µ–Ω–∏–µ
‚Ä¢ `/tmute <–º–∏–Ω—É—Ç—ã>` - –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–∞–≥–ª—É—à–µ–Ω–∏–µ

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ `/chatstats` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞
‚Ä¢ `/userstats` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

üîß **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:**
‚Ä¢ `/mention_all` - –£–ø–æ–º—è–Ω—É—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""

    try:
        await event.reply(help_text)
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ help –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {sender.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã help: {e}")

@client.on(events.NewMessage(pattern='/ping'))
async def ping_handler(event):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    try:
        start = datetime.now()
        message = await event.reply('Pong!')
        end = datetime.now()
        ms = (end - start).microseconds / 1000
        await message.edit(f'Pong! `{ms}ms`')
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ ping –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {ms}ms")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã ping: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
    # –≠—Ç–∏ –∏–º–ø–æ—Ä—Ç—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø—Ä–∏ –ø–æ–ª–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–µ
    try:
        import log_management
        import moderation
        import admin
        import stats
        from utils.commands import register_handlers as utils_register_handlers
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        log_management.register_handlers(client)
        moderation.register_handlers(client)
        admin.register_handlers(client)
        stats.register_handlers(client)
        utils_register_handlers(client)
    except ImportError as e:
        logger.warning(f"–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–¥—É–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {e}")
        logger.info("–ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π")
    
    try:
        logger.info("–ó–∞–ø—É—Å–∫ UserBot...")
        print("UserBot –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        await client.start()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        me = await client.get_me()
        logger.info(f"UserBot –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {me.first_name} (@{me.username})")
        
        # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
        await client.run_until_disconnected()
        
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await client.disconnect()
        logger.info("UserBot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—Å–∫ –≤ Termux –ø–µ—Ä–µ–¥ –≤—Å–µ–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
    if not check_termux_environment():
        print("\n\033[91m–ó–∞–ø—É—Å–∫ –ø—Ä–µ—Ä–≤–∞–Ω: UserBot —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ Termux!\033[0m")
        sys.exit(1)
        
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n–†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
EOF

    # –°–æ–∑–¥–∞–Ω–∏–µ log_management_main.py
    cat > $HOME/userbot/log_management_main.py << 'EOF'
#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram UserBot —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
"""
import os
import sys
import logging
import asyncio
import platform

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–µ–¥—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
def check_termux_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Å—Ä–µ–¥–µ Termux"""
    termux_signs = [
        os.path.exists('/data/data/com.termux'),
        os.getenv('TERMUX_VERSION') is not None,
        'Android' in platform.version()
    ]
    # –ï—Å–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    if os.getenv('USERBOT_TEST_MODE'):
        return True
    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ Termux –Ω–µ –Ω–∞–π–¥–µ–Ω
    if not any(termux_signs):
        print("\033[91m–û—à–∏–±–∫–∞: –≠—Ç–æ—Ç UserBot –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ Termux!\033[0m")
        print("\033[93m–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Termux –∏–∑ F-Droid –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –≤ –Ω–µ–º:\033[0m")
        print("\033[93mhttps://f-droid.org/packages/com.termux/\033[0m")
        return False
    return True

if __name__ == "__main__":
    if not check_termux_environment():
        sys.exit(1)

from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("userbot.log", mode='a'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ë–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã
async def help_handler(event):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    help_text = """üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**

üîπ **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/help` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ `/ping` - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞

‚ö†Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏."""
    await event.reply(help_text)

async def ping_handler(event):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    message = await event.reply('Pong!')
    await message.edit('Pong! UserBot —Ä–∞–±–æ—Ç–∞–µ—Ç!')

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    from telethon import TelegramClient, events
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ API –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    API_ID = os.getenv("API_ID")
    API_HASH = os.getenv("API_HASH")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –¥–∞–Ω–Ω—ã—Ö
    if not API_ID or not API_HASH:
        logger.error("API_ID –∏–ª–∏ API_HASH –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        print("\033[91m–û—à–∏–±–∫–∞: API_ID –∏–ª–∏ API_HASH –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!\033[0m")
        print("\033[93m–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .env –∏ —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.\033[0m")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    client = TelegramClient(
        'userbot',
        API_ID,
        API_HASH,
        device_model="Termux UserBot",
        system_version="1.0",
        app_version="1.0"
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    client.add_event_handler(
        help_handler,
        events.NewMessage(pattern='/help')
    )
    
    client.add_event_handler(
        ping_handler,
        events.NewMessage(pattern='/ping')
    )
    
    try:
        print("\033[92m–ó–∞–ø—É—Å–∫ UserBot...\033[0m")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        await client.start()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        me = await client.get_me()
        print(f"\033[92mUserBot –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {me.first_name} (@{me.username})\033[0m")
        print("\033[93m–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞\033[0m")
        
        # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
        await client.run_until_disconnected()
        
    except KeyboardInterrupt:
        print("\n\033[93m–†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º\033[0m")
    except Exception as e:
        print(f"\n\033[91m–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}\033[0m")
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await client.disconnect()
        print("\033[93mUserBot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\033[0m")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\033[93m–†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º\033[0m")
    except Exception as e:
        print(f"\n\033[91m–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}\033[0m")
EOF

    # –°–æ–∑–¥–∞–Ω–∏–µ utils/__init__.py
    cat > $HOME/userbot/utils/__init__.py << 'EOF'
# –ü–∞–∫–µ—Ç —Å —É—Ç–∏–ª–∏—Ç–∞–º–∏ –¥–ª—è Telegram UserBot
EOF

    # –°–æ–∑–¥–∞–Ω–∏–µ utils/commands.py
    cat > $HOME/userbot/utils/commands.py << 'EOF'
#!/usr/bin/env python3
"""–ú–æ–¥—É–ª—å —Å –æ–±—â–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –¥–ª—è Telegram UserBot"""

from telethon import TelegramClient, events
from telethon.tl.types import ChannelParticipantsAdmins

def register_handlers(client: TelegramClient):
    """Register utility command handlers"""
    
    @client.on(events.NewMessage(pattern='/mention_all'))
    async def mention_all(event):
        """Command to mention all users in chat"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ
        if event.is_private:
            await event.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö!")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
        sender = await event.get_sender()
        sender_id = sender.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        chat = await event.get_chat()
        chat_id = event.chat_id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        is_admin = False
        async for admin in client.iter_participants(chat_id, filter=ChannelParticipantsAdmins):
            if admin.id == sender_id:
                is_admin = True
                break
                
        if not is_admin:
            await event.reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")
            return
            
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
        participants = []
        async for participant in client.iter_participants(chat_id):
            if not participant.bot and participant.id != sender_id:
                participants.append(participant)
                
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
        chunks = []
        chunk = ""
        for participant in participants:
            mention = f"[{participant.first_name}](tg://user?id={participant.id})"
            if len(chunk) + len(mention) + 2 > 4000:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
                chunks.append(chunk)
                chunk = ""
            chunk += mention + ", "
            
        if chunk:
            chunks.append(chunk)
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
        for chunk in chunks:
            await event.reply(f"–í–Ω–∏–º–∞–Ω–∏–µ! {chunk[:-2]}")
EOF

    echo -e "${GREEN}–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!${NC}"
fi

# –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ .env –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è API –¥–∞–Ω–Ω—ã—Ö
if [ ! -f "$HOME/userbot/.env" ]; then
    echo -e "${YELLOW}–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ .env...${NC}"
    echo "# Telegram API –¥–∞–Ω–Ω—ã–µ" > .env
    echo "API_ID=–≤–∞—à_api_id" >> .env
    echo "API_HASH=–≤–∞—à_api_hash" >> .env
    echo -e "${GREEN}–§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ API.${NC}"
fi

# –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∑–∞–ø—É—Å–∫–∞
echo -e "${YELLOW}–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–ø—É—Å–∫–∞...${NC}"
cat > $HOME/userbot/start_userbot.sh << 'EOF'
#!/data/data/com.termux/files/usr/bin/bash
# –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ Telegram UserBot –≤ Termux

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤ Termux
if [ ! -d "/data/data/com.termux" ]; then
    echo -e "${RED}–û—à–∏–±–∫–∞: –°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –≤ Termux!${NC}"
    echo -e "${YELLOW}–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Termux –∏–∑ F-Droid:${NC}"
    echo -e "${BLUE}https://f-droid.org/packages/com.termux/${NC}"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤
if [ ! -f "$HOME/userbot/log_management_main.py" ]; then
    echo -e "${RED}–û—à–∏–±–∫–∞: –§–∞–π–ª log_management_main.py –Ω–µ –Ω–∞–π–¥–µ–Ω!${NC}"
    echo -e "${YELLOW}–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–Ω–æ–≤–æ.${NC}"
    exit 1
fi

# –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é userbot
cd $HOME/userbot

# –ó–∞–ø—É—Å–∫ UserBot
echo -e "${GREEN}–ó–∞–ø—É—Å–∫ Telegram UserBot...${NC}"
python log_management_main.py
EOF

# –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
chmod +x $HOME/userbot/start_userbot.sh

echo -e "${GREEN}‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê${NC}"
echo -e "${GREEN}‚îÇ  –£—Å—Ç–∞–Ω–æ–≤–∫–∞ UserBot —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!       ‚îÇ${NC}"
echo -e "${GREEN}‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò${NC}"
echo -e ""
echo -e "${YELLOW}–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:${NC}"
echo -e "1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª ${BLUE}$HOME/userbot/.env${NC} –∏ —É–∫–∞–∑–∞—Ç—å API_ID –∏ API_HASH"
echo -e "2. –ó–∞–ø—É—Å—Ç–∏—Ç—å UserBot –∫–æ–º–∞–Ω–¥–æ–π: ${BLUE}$HOME/userbot/start_userbot.sh${NC}"
echo -e ""
echo -e "${YELLOW}–ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è${NC}"